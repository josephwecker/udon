#!/usr/bin/env ruby
require 'rubygems'
require 'libxml'


class UdonChild
  attr_accessor :child_type
end

class UdonElement < UdonChild
  attr_accessor :name, :id, :unaries, :attributes, :children
  def initialize(args={})
    @child_type = :element
    @name =       args.delete(:name)
    @id =         args.delete(:id)
    @unaries =    args.delete(:unaries) || []
    @attributes = args.delete(:attributes) || {}
    @children =   args.delete(:children) || []
  end


#-------------------- Pretty printing --------------------------
  # TODO:
  #  - Attributes in extra-embed-list-style when enough of them / too long
  #  - Bonus if attribute values line up in eels
  #  - Remove quotes from value if in eels
  #  - Even single children start on next line if blk + attributes take up too
  #    much space.
  #  - Optional online pre-children-pipe
  #  - Make sure sax parser combines sequential characters so we don't
  #    introduce bad whitespace.
  #  - Text blocks (including inlined tags
  #    * 
  def id_str
    @id.nil? ? '' : "[#{@id.gsub(/(\[|\])/){|s|"\\#{s}"}}]"
  end

  def unary_str
    @unaries.count < 1 ? '' : ".#{@unaries.map{|u|u.gsub('.','\.')}.join('.')}"
  end

  def embedstyle
    out = "<{#{@name}#{id_str}#{unary_str}"
    if @attributes.count > 0
      out += " " + @attributes.map{|k,v| inline_attr(k,v)}.join(' ')
    end
    if @children.count > 0
      out += ' '
      @children.each{|c| out += c.is_a?(String) ? c : c.embedstyle}
    end
    return out + "}>"
  end

  def inline_attr(k,v)
    k = '"'+k.gsub('"','\"')+'"' if k =~ /\s/
    v = '"'+v.gsub('"','\"')+'"' if v =~ /\s/
    ":#{k} #{v}"
  end

  def canonical(depth=0)
    ind = '' + ('  '*depth)
    out = ind + "|#{@name}#{id_str}#{unary_str}"
    if @attributes.count > 0
      out += " " + @attributes.map{|k,v| inline_attr(k,v)}.join(' ')
    end
    if @children.count == 1 && @children[0].is_a?(String)
      out += " #{@children[0]}\n"
    elsif @children.count > 1 && mixed(@children)
      out += "\n" + ind + '  '
      @children.each{|c| out += c.is_a?(String) ?  c : c.embedstyle}
      out += "\n"
    else
      out += "\n"
      @children.each do |c|
        if c.is_a? String
          out += ind + '  ' + c.strip + "\n"
        else
          out += c.canonical(depth+1)
        end
      end
    end
    return out
  end

  def mixed(list)
    found_str = false
    found_node = false
    list.each do |l|
      if l.is_a?(String) then found_str = true
      else found_node = true end
    end
    return (found_str && found_node)
  end
end

include LibXML

class UdonConstructor
  attr_accessor :children
  def initialize
    @children = []
    @cstack = []
  end

  def canonical
    out = ''
    @children.each do |c|
      if c.is_a? String
        out += c + "\n"
      else
        out += c.canonical
      end
    end
    return out
  end

  def on_start_element_ns(name, attributes, prefix, uri, namespaces)
    fullname = (prefix.nil? ? '' : prefix + ':') + name
    if (namespaces || Hash.new).count > 0
      namespaces.each do |k,v|
        if k.nil? then attributes['xmlns'] = v
        else attributes['xmlns:'+k] = v end
      end
    end
    id = attributes.delete('id')
    unaries = attributes.delete('class')
    unaries = unaries.split /\s+/ if unaries
    attributes.each{|k,v| attributes[k] = v.gsub("&#38;","&")}
    @cstack << UdonElement.new(:name=>fullname,
                               :attributes=>attributes,
                               :id=>id,
                               :unaries=>unaries)
  end

  def on_characters(chars)
    return if chars =~ /^\s*$/
    if @cstack.count > 0
      @cstack[-1].children << chars.gsub(/\s+/,' ')
    else
      @children << chars.gsub(/\s+/,' ')
    end
  end

  def on_end_element_ns(name, prefix, uri)
    if @cstack.count > 0
      finished = @cstack.pop
      if @cstack.count > 0
        @cstack[-1].children << finished
      else
        @children << finished
      end
    else
      raise 'huh??'
    end
  end

  def on_end_document
    if @cstack.count > 0
      @children << @cstack
    end
  end


  #---------- Not yet implemented
  def on_cdata_block(cdata)
    STDOUT << "on_cdata_block" << "\n" <<
              "  cdata " << cdata << "\n"
    STDOUT.flush
  end

  def on_comment(comment)
    STDOUT << "on_comment" << "\n" <<
              "  comment: " << comment << "\n"
    STDOUT.flush
  end

  def on_processing_instruction(target, data)
    STDOUT << "on_characters" << "\n"
              "  target: " << target << "\n" <<
              "  data:   " << data << "\n"
    STDOUT.flush
  end

  def on_reference(name)
    STDOUT << "on_reference:" << "\n" <<
              "  name:" << name << "\n"
    STDOUT.flush
  end


  #---------- Unused at the moment
  def on_start_document() end
  def on_error(error) end
  def on_external_subset(name, external_id, system_id) end
  def on_has_external_subset() end
  def on_has_internal_subset() end
  def on_internal_subset(name, external_id, system_id) end
  def on_is_standalone() end
end

class Xml2Udon

  MISC = {
    XML::Reader::LOADDTD => :loaddtd,
    XML::Reader::DEFAULTATTRS => :defaultattrs,
    XML::Reader::VALIDATE => :validate,
    XML::Reader::SUBST_ENTITIES => :subst_entities,
    XML::Reader::SEVERITY_VALIDITY_WARNING => :severity_validity_warning,
    XML::Reader::SEVERITY_VALIDITY_ERROR => :severity_validity_error,
    XML::Reader::SEVERITY_WARNING => :severity_warning,
    XML::Reader::SEVERITY_ERROR => :severity_error}

  TYPES = {
    XML::Reader::TYPE_NONE => :none,
    XML::Reader::TYPE_ELEMENT => :element,
    XML::Reader::TYPE_ATTRIBUTE => :attribute,
    XML::Reader::TYPE_TEXT => :text,
    XML::Reader::TYPE_CDATA => :cdata,
    XML::Reader::TYPE_ENTITY_REFERENCE => :entity_reference,
    XML::Reader::TYPE_ENTITY => :entity,
    XML::Reader::TYPE_PROCESSING_INSTRUCTION => :processing_instruction,
    XML::Reader::TYPE_COMMENT => :comment,
    XML::Reader::TYPE_DOCUMENT => :document,
    XML::Reader::TYPE_DOCUMENT_TYPE => :document_type,
    XML::Reader::TYPE_DOCUMENT_FRAGMENT => :document_fragment,
    XML::Reader::TYPE_NOTATION => :notation,
    XML::Reader::TYPE_WHITESPACE => :whitespace,
    XML::Reader::TYPE_SIGNIFICANT_WHITESPACE => :significant_whitespace,
    XML::Reader::TYPE_END_ELEMENT => :end_element,
    XML::Reader::TYPE_END_ENTITY => :end_entity,
    XML::Reader::TYPE_XML_DECLARATION => :xml_declaration}

  MODES = {
    XML::Reader::MODE_INITIAL => :mode_initial,
    XML::Reader::MODE_INTERACTIVE => :mode_interactive,
    XML::Reader::MODE_ERROR => :mode_error,
    XML::Reader::MODE_EOF => :mode_eof,
    XML::Reader::MODE_CLOSED => :mode_closed,
    XML::Reader::MODE_READING => :mode_reading }

  def io(stream)
    xml = XML::Reader.io(stream)
    while xml.read
      case xml.node_type
      when XML::Reader::TYPE_ELEMENT

        print "\n#{'  '*xml.depth}|#{xml.name}"
        attrs = (0..xml.attribute_count-1).inject({}) do |hash,v|
          xml.move_to_next_attribute
          hash[xml.name] = xml.value
          hash
        end
      end
      print " [#{TYPES[xml.node_type]}]"
    end
  end

  def saxio(stream)
    xml = XML::SaxParser.io(stream)
    udon = UdonConstructor.new
    xml.callbacks = udon
    begin
      xml.parse
    #rescue
    end
    #require 'pp'
    #pp udon.children
    puts udon.canonical
  end
end

x = Xml2Udon.new
x.saxio(ARGF)
