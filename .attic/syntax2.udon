
|===== Line / Block designators (Primary expression types)

#---------- Strings -------------

# data ~= string == text == cdata ...
# fence == filter == encoders/decoders ~= heredoc ~= processing-instruction

wwww                    # DATA (first class strings / text / document / cdata / whatever)
<<                      # unparsed DATA following indent rules (doesn't pull in a newline as the
                        #   first character- ignores it if it's there) (implied same as <<")
<<'                     # DATA that has different metachar/escaping/interpolation rules
<uuu<                   # FENCED data (like heredoc that declares processor)
<uuu<'                  # or backtick or explicit double-quote to specify interpolation/metachar set
<uuu<uuu<"              # chained fenced data (["] on the end is optional, and can also be ['`])
<{"www"}>               # embedded indent-insensitive (also with other variants)
<{uuu<"www"}>           # embedded FENCE (also with single+back-tick variants)
<{uuu<uuu<"www"}>       # embedded chained FENCE

|mmmm                   # ELEMENT (with optional ending pipe before children)
:mmmm vvvv              # ATTRIBUTE + value
!uuuu                   # EXPRESSION

<{mmmm}>                # embedded ELEMENT
<{!uuuu}>               # embedded EXPRESSION (can be embedded many more places than elements)
<{/uuuu}>               # embedded INTERPOLATION (non-embedded is just an expression)


<super-table<uudecode<" 
  ...

shortcut for
<super-table<
  <{uudecode<"
  ...
  "}>

<javascript<

!super-table <<'
  |col1|col2|col3|
  |1   |2   |3   |
  |asd |asdf|jfi |

|p.red
  :onclick dostuff();
  <raw<
    hey <span>pardner!</span>


|====:attribute values:
  :a kjwei 


blah blah <{url"something oh yeah!"}>

<<So herein lies a bunch of text
  why would I want it in this funny format? I don't know
    But for one thing at least it guarantees that no matter how much indenting and dedenting I do
    etc.
            I'm going to be OK.
          yes.
    So I could pretty easily hold something like this:
<<
  |here's some stuff
    <!-- product -->        <productname>docbook</productname>
      <!-- productVersion --> <productnumber>5.0</productnumber>
    <!-- artifactType       spec; what else? :-) -->
    <!-- stage -->          <releaseinfo role="stage">cd</releaseinfo>
    <!-- revision -->       <biblioid class="pubsnumber">04</biblioid>
    <!-- language           en; see /article/@xml:lang -->
    <!-- form               xml -->
    <releaseinfo role="location">http://docs.oasis-open.org/docbook/specs</releaseinfo>


start child
  <u<


|link :href http://example.com/hi?this=<{u|'awesome how are you???'}>
|sample-code<{'


<blah<

(There is a difference between declaring that a document is in a certain encoding and instructions
saying to be sure that the doc or string is encoded/decoded. TYPE vs. CONVERT-TO-TYPE...)

Encoding/decoding generally can be applied multiple times - it's a string transformation/replacement
language. In other words:
 !urlencode !urlencode !urlencode a+b  # --> a%25252Bb
 is not the same as
 !urlencode a+b                        # --> a%2Bb

|%|blah
!%!blah

:%:"bkj fej ifoewj//- hey!"

freeform
"
'
`
'''
{!% bkj fej ifewjfiewo//- hey!!}

!%
!&

{!%'  '}
{!&'  '}

{%'  '%}
{>-'  '-<}

{!' '!}

{-|  |-}

<{ }>
{!blah`    `}

%' ' # for attributes
&' ' # for attributes

http://example.com/something?hi={%'hi this is a test'%}


|table |thead |tr :height 17px
                |th val1
                |th val2
                |th total
  |tr
    |td 1.0
    |td 2.7
    |td awesome

{|something :blah hi dude|}

So - lexically speaking:
 * Text is indent-sensitive unless inside a freeform block
 * Text that has one of ! or | after a newline+\s* needs to be escaped
 * A node with a first child that starts with a colon needs to have the colon
   escaped or the end of the attributes/identity block delimited with a pipe
 * The following need to be escaped inside text to not be processed:
     - {|
     - {!
     - {/
     - |} (if within an embedded element)
     - !} (if within an embedded expression)
     - /} (if within an embedded interpolation)

|====== Scalar forms / encoding / escaping
 * Attribute Values
 * Quoted attribute values
 * First-class data/text/children
 * Freeform single-quote
 * Freeform double-quote
 * Freeform back-tick
 * Freeform (something else for base64)

SOME COMBINATION WITH
 * Allow embedded blocks
 * Single-quote needs escaping
 * Double-quote needs escaping
 * Back-tick needs escaping
 * Whitespace needs escaping
 * Allows common metacharacter sequences (\n\r\t\v\f\b\d\e\s\ )
 * Allows control-sequences (\^a...\^Z)
 * Allows unicode/hex/octal metacharacter sequences (\X12 \x12 \x{12345} \u1234)
 * Backslash needs escaping

post processor
 * percent encoding/decoding (url)
 * character-entity encoding/decoding
 * base64 encoding/decoding
 * ascii85 encoding/decoding


Metacharacters
Encoding-instructions/sanitization
Embedded-blocks
Indent-sensitivity
Pre-parse-children


udon code vs. application processing instructions vs. filters-in-block vs. filters-freeform


Not allowed with text blocks:

|Example[1]
  >>
    Some text
   partial dedent

|Example[2]
  Some text
    |who's-my-mommy?


=======================
>>"first
   same
>> first
   same
>> first
  same
>>
  first
  same
>>  first
  same

>>" first
 same

!table
  |-------------+---+-----------------------------------------------------+-----------+
  | context     | d | Emb | SQE | DQE | BTE | WSE | MCS | CTR | UNI | BSE | backslash |
  |-------------+---+-----------------------------------------------------+-----------+
  | attr values |   | YES | --- | --- | --- | YES | --- | --- | --- | *   | emit      |
  | attr values | " | YES | --- | YES | --- | --- | YES | YES | YES | YES | error     |
  | attr values | ' | YES | YES | --- | --- | --- | --- | --- | --- | *   | emit      |
  | attr values | ` | --- | --- | --- | --- | --- | --- | --- | --- | --- | emit      |
  | first-class |   | YES | --- | --- | --- | **  | --- | --- | --- | *   | emit      |
  | freeform    | " | YES | --- | --- | --- | --- | YES | YES | YES | YES | error     |
  | freeform    | ' | YES |
  | freeform    | ` | --- |
  |-------------+---+-----------------------------------------------------+
  | * - Only before items that can be escaped
  | 
  |-----------------------------------------------------------------------+


|something :attr value\ 



# Blocks are for something like this:
{|something {|something2 {|something3|} {|something4|}|}|}
Which makes it easier to mix things {|emphasis in documents|}

|==== Indent delimiting for line-types
|something
  |something2    # Child of something
    |something3  # Child of something2
   |something4   # _Also_ child of something2 (didn't dedent all the way)

|==== Reasoning
That way you can do something like:

|awesome :color red
         :size  yes
  |child-of-awesome

|===== Elements
Have the following (all optional) parts:
  identity
    - namespace(s)
    - name
  attributes
    - id
    - unary attributes (classes)
    - attributes
  children

identity must come before the attributes which must come before the children.
Namespaces must come before name.
BUT, the order for id, unary attributes, and attributes does not matter.

|====== Attributes
Have the following parts:
  - namespace(s)
  - name
  - value
  - implied or explicit type

Probable scalar types:
  - string
  - string w/ encodings (different by container)
  - integer (no size constraint)
  - real    (double float size constraints)
  - date
  - time
  - datetime
  - time-interval
  - color
  - number with unit (e.g., 18px)
  - ??expressions?? (need to define better)

|=== Implied attribute types
* Normally string values need to be delimited with quotes
* If it's only one word though, not quotes necessary
* Also, if the attribute started on its own line, it can have multiple words up
  until the newline or a word starting with '.' or ':'

The following are equivalent:
|Element :attribute one
  :another 'attribute oh yeah'
  And here is a child
|Element :attribute one
  :another attribute oh yeah
  And here is a child

|=== Oneliners


  |namespace:type [id-or-name] .flag .other-flag :mental-state crazy It's true!
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>crazy]
  # Children:   ["It's true!"]

  |namespace:type [id-or-name] .flag .other-flag :mental-state 'crazy So true'
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>'crazy So true']
  # Children:   ["So true"]
  |namespace:type [id-or-name] .flag .other-flag :mental-state crazy So true
  |namespace:type[id-or-name].flag.other-flag :mental-state crazy So true
  |namespace:type.flag.other-flag[id-or-name] :mental-state crazy So true
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>crazy]
  # Children:   ["So true"]

  |something.else[57]
  # Namespace:  -
  # Type:       something
  # Attributes: [ID=>57,else=>true]
  # Children:   []

  |.awesome[32] :color #456678 :size nice| Thing to do
  # Namespace:  -
  # Type:       -
  # Attributes: [ID=>32, color=>#456678, size=>nice]
  # Children:   []

  |[good-one]
  # Namespace:  -
  # Type:       -
  # Attributes: [ID=>good-one]
  # Children:   []

  |hi there
  # Namespace:  -
  # Type:       hi
  # Attributes: []
  # Children:   ['there']

  | there
  # Namespace:  -
  # Type:       -
  # Attributes: []
  # Children:   ['there']

  |
  # Namespace:  -
  # Type:       -
  # Attributes: []
  # Children:   []

* You can have children elements on the same line, but they can't have children
  extending to the next line:
|first-element :blah true |second |third
                             |fourth    # Child of first-element
   |fifth # Also child of first-element



* Indenting text blocks (and dedenting), is fine as long as the dedent doesn't
  go past the initial level. (base-indent).


BUT, what do we do about this:
  |blah
    Some text blah blah
    blah blah
      |another
Trying to be a child of text-data... ?




=================
   1             2
   v             V
    block-form   online-child
      3
      v
      child
     back-dent-child



For line-oriented parsing, you can flush the output simply by appending every
top level object with a top-level comment, such as:

|flush me
#--- (looks familiar, eh?) - now flush-me can be processed even if the next one
#    is delayed
|another one
  :some stuff
#---


flush me
another one some=stuff

  blah
    <javascript<esc<





another-try|something[blah].yeah
  george: surrey
  asdf: blah


<testcases xml:base="blahblah" xml:type="wowow"/>

testcases
  xml:base = blahblah
  xml:type = wowow

testcases
  xml:base: blahblah
  xml:type: wowow

testcases
  xml:base: blahblah
  xml:type: wowow

something blah:wow else:kjasdf


|element-name.unary[id] something: value another: value And some children

|element-name.unary[id]
    something:something: value
    another: value
  And some children


