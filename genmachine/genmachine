#!/usr/bin/env ruby
require 'pp'
require 'erb'
require 'optparse'

LANGUAGES = [:ruby]
BANNER = "Usage: genmachine [options] STATE_TABLE_FILES"

class String
  def underscore
    self.gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
    gsub(/([a-z\d])([A-Z])/,'\1_\2').
    gsub(/[^a-zA-Z_]/,'_').
    downcase
  end
end

class GenMachine
  def initialize(files)
    @table = {}
    @last_state = nil
    @first_state = "__initial"
    @files = files
    @libraries = {}
    @executables = {}
    template_base = File.expand_path(File.dirname(__FILE__))+'/templates/'
    LANGUAGES.each do |lang|
      tbase = template_base + lang.to_s + '/'
      @libraries[lang] = ERB.new IO.read(tbase+'library.erb')
      @executables[lang] = ERB.new IO.read(tbase+'executable.erb')
    end
  end

  def build
    @files.each do |fname|
      File.new(fname,'r').each_with_index do |line, line_no|
        line = line.strip
        det = line[0..0]
        if det == '|' or (det == ':' && @last_state)
          cols = line.split(det,-1)[1..-1].map{|c| c.strip}
          row = {
            :input => cols[1],
            :acc   => cols[2],
            :exprs => (cols[3]||'').split(';'),
            :next  => '__'+cols[4].underscore}
          if det == '|'
            if cols[0].start_with? '>'
              state = '__'+cols[0][1..-1].strip.underscore
              @first_state = state
            else
              state = '__'+cols[0].underscore
            end
            @table[state] ||= []
            @table[state] << row
            @last_state = state
          elsif det == ':'
            @table[@last_state].last.each do |k,v|
              @table[@last_state].last[k] = v.nil? ? row[k] : v + row[k]
            end
          end
        end
      end
    end
    pp @table
  end

  def generate_class(classname, fname, language)
    @classname = classname
    f = File.new(fname, 'w+')
    f.write(@libraries[language].result(binding))
    f.close
  end

  def generate_executable(executablename, language)
    f = File.new(executablename, 'w+')
    f.write(@executables[language].result(binding))
    f.chmod(0755)
    f.close
  end

  private

  def parse_statename


  end
end


#---------------------------------------------- MAIN --------------------------

options = {}
opts = OptionParser.new do |opts|
  opts.version = '0.0.1'
  opts.banner = BANNER
  opts.on('-c', '--classname NAME',
          "Class/module/function name for generated library code "+
          "(default STATE_TABLE_FILE)") do |v|
    options[:classname] = v
  end
  opts.on('-l', '--language LANGUAGE',
          "Language to generate code for- currently one of [#{LANGUAGES.join(',')}] " +
          "(default #{LANGUAGES.first})") do |v|
    options[:language] = v.underscore.to_sym
  end
  opts.on('-t', '--test-with FILE',
          "Try parsing the specified file after generating the parser "+
          "(default STATE_TABLE_FILE.gmtest if it exists)") do |v|
    options[:test_file] = v
  end
  opts.on('-e', '--[no-]executable',
          "Generate an executable parser (default true)") do |v|
    options[:executable] = v
  end
end


files = opts.parse(ARGV)
if files.size < 1
  $stderr.puts BANNER
  exit 1
end

file_base = files[0].chomp(File.extname(files[0]))
name_base = File.basename(file_base)
options[:executable] ||= true
options[:language]   ||= LANGUAGES.first
options[:classname]  ||= name_base.capitalize + 'Parser'
options[:test_file]  ||= files[0] + '.gmtest'
class_fname = options[:classname].underscore + '.rb'
exe_fname = name_base.underscore

gm = GenMachine.new(files)
gm.build
gm.generate_class(options[:classname], class_fname, options[:language])
if options[:executable]
  gm.generate_executable(exe_fname, options[:language])
end

