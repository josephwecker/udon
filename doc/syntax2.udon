
|===== Line / Block designators (Primary expression types)
# ___ represents the text that fills in the block/line

___              # _Scalar_        (text or basic types but indent-sensitive)
|'___'| or |{___}'___'| # _Gated_  (scalar text - indent-insensitive)

|___ or |{___}   # _Element_       (ordered, can have duplicates)
:___ or :{___}   # _Attribute_     (unordered, no dups. last one takes precedence)

-/___ or -/{___}   # _Interpolation_ (Variables/tree/path possibly as loop)
!___ or !{___}   # _Expression_    (directive or interpolated)


# Blocks are for something like this:
|{something |{something2 |{something3} |{something4}}}
Which makes it easier to mix things |{emphasis in documents}

|==== Indent delimiting for line-types
|something
  |something2    # Child of something
    |something3  # Child of something2
   |something4   # _Also_ child of something2 (didn't dedent all the way)

|==== Reasoning
That way you can do something like:

|awesome :color red
         :size  yes
  |child-of-awesome

|===== Elements
Have the following (all optional) parts:
  identity
    - namespace(s)
    - name
  attributes
    - id
    - unary attributes (classes)
    - attributes
  children

identity must come before the attributes which must come before the children.
Namespaces must come before name.
BUT, the order for id, unary attributes, and attributes does not matter.

|====== Attributes
Have the following parts:
  - namespace(s)
  - name
  - value
  - implied or explicit type

Probable scalar types:
  - string
  - string w/ encodings (different by container)
  - integer (no size constraint)
  - real    (double float size constraints)
  - date
  - time
  - datetime
  - time-interval
  - color
  - number with unit (e.g., 18px)
  - ??expressions?? (need to define better)

|=== Implied attribute types
* Normally string values need to be delimited with quotes
* If it's only one word though, not quotes necessary
* Also, if the attribute started on its own line, it can have multiple words up
  until the newline or a word starting with '.' or ':'

The following are equivalent:
|Element :attribute one
  :another 'attribute oh yeah'
  And here is a child
|Element :attribute one
  :another attribute oh yeah
  And here is a child

|=== Oneliners


  |namespace:type [id-or-name] .flag .other-flag :mental-state crazy It's true!
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>crazy]
  # Children:   ["It's true!"]

  |namespace:type [id-or-name] .flag .other-flag :mental-state 'crazy So true'
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>'crazy So true']
  # Children:   ["So true"]
  |namespace:type [id-or-name] .flag .other-flag :mental-state crazy So true
  |namespace:type[id-or-name].flag.other-flag :mental-state crazy So true
  |namespace:type.flag.other-flag[id-or-name] :mental-state crazy So true
  # Namespace:  namespace
  # Type:       type
  # Attributes: [ID=>id-or-name,flag=>true, other-flag=>true, mental-state=>crazy]
  # Children:   ["So true"]

  |something.else[57]
  # Namespace:  -
  # Type:       something
  # Attributes: [ID=>57,else=>true]
  # Children:   []

  |.awesome[32] :color #456678 :size nice| Thing to do
  # Namespace:  -
  # Type:       -
  # Attributes: [ID=>32, color=>#456678, size=>nice]
  # Children:   []

  |[good-one]
  # Namespace:  -
  # Type:       -
  # Attributes: [ID=>good-one]
  # Children:   []

  |hi there
  # Namespace:  -
  # Type:       hi
  # Attributes: []
  # Children:   ['there']

  | there
  # Namespace:  -
  # Type:       -
  # Attributes: []
  # Children:   ['there']

  |
  # Namespace:  -
  # Type:       -
  # Attributes: []
  # Children:   []

* You can have children elements on the same line, but they can't have children
  extending to the next line:
|first-element :blah true |second |third
                             |fourth    # Child of first-element
   |fifth # Also child of first-element

